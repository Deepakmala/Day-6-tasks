Day 06 :OOPS TASK 





1. The class Movie is stated below. An instance of class Movie represents a film. This class has the following three properties:

title, which is a String representing the title of the movie
studio, which is a String representing the studio that made the movie
rating, which is a String representing the rating of the movie (i.e. PG­13, R, etc)

a) Write a constructor for the class Movie, which takes a String representing the title of the movie, a String representing the studio, and a String representing the rating as its arguments, and sets the respective class properties to these values.

class Movie {
  constructor(title, studio, rating = 'PG') {
    this.title = title;
    this.studio = studio;
    this.rating = rating;
  }
}





b) The constructor for the class Movie will set the class property rating to "PG" as default when no rating is provided.

class Movie {
    constructor(title, studio, rating = 'PG') {
    this.title = title;
    this.studio = studio;
    this.rating = rating;
  }
}




c) Write a method getPG, which takes an array of base type Movie as its argument, and returns a new array of only those movies in the input array with a rating of "PG". You may assume the input array is full of Movie instances. The returned array need not be full.

class Movie {
constructor(title, studio, rating = 'PG') {
    this.title = title;
    this.studio = studio;
    this.rating = rating;
}

  static getPG(movies) {
    return movies.filter(movie => movie.rating === 'PG');
  }
}







d) Write a piece of code that creates an instance of the class Movie with the title “Casino Royale”, the studio “Eon Productions”, and the rating “PG­13”

const casinoRoyale = new Movie('Casino Royale', 'Eon Productions', 'PG-13');








2. https://github.com/rvsp/typescript-oops/blob/master/Practice/class-circle.md



  class Circle {
  private radius: number = 1.0;
  private color: string = "red";

  constructor(radius?: number, color?: string) {
    if (radius) {
      this.radius = radius;
    }
    if (color) {
      this.color = color;
    }
  }

  getRadius(): number {
    return this.radius;
  }

  setRadius(radius: number): void {
    this.radius = radius;
  }

  getColor(): string {
    return this.color;
  }

  setColor(color: string): void {
    this.color = color;
  }

  toString(): string {
    return `Circle[radius=${this.radius},color=${this.color}]`;
  }

  getArea(): number {
    return Math.PI * this.radius * this.radius;
  }

  getCircumference(): number {
    return 2 * Math.PI * this.radius;
  }
}










3. Write a “person” class to hold all the details.

class Person {
  constructor(firstName, lastName, age) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.age = age;
  }
}






4. write a class to calculate the uber price.


class UberPrice {
  constructor(distance, time, baseFare, costPerKilometer, costPerMinute) {
    this.distance = distance;
    this.time = time;
    this.baseFare = baseFare;
    this.costPerKilometer = costPerKilometer;
    this.costPerMinute = costPerMinute;
  }

  calculatePrice() {
    return this.baseFare + (this.distance * this.costPerKilometer) + (this.time * this.costPerMinute);
  }
}